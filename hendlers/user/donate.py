from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, LabeledPrice, PreCheckoutQuery, PollAnswer, SuccessfulPayment
from keyboards.other_kb import donate_button, premium
from database.requests import User

router = Router()

@router.message(F.text == "–ü—Ä–µ–º–∏—É–º üëâüëà")
async def setting(message: Message):
    await message.answer_photo(photo = "AgACAgIAAxkBAAIOZWdDXl5yfp1b18b5ljMcwsrQxRUjAAL96jEbAowYSug-7gd0F-J2AQADAgADbQADNgQ",
                               caption="–ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ–º –≤–∞–º –∏–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –î–û–ù–ê–¢–ê! –ï—â—ë –Ω–∏–∫—Ç–æ —Ç–∞–∫–æ–≥–æ –Ω–µ –¥–µ–ª–∞–ª.\n–ë–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –±–µ—Å–ø–ª–∞—Ç–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è Chat GPT –≤–µ—Ä—Å–∏–µ–π 4o-mini –∏ —Ç–∞–∫ –∫–∞–∫ –ø—Ä–∏–±—ã–ª–∏ –æ—Ç –Ω–µ–≥–æ –Ω–µ—Ç, –±—ã–ª–∞ –≤–≤–µ–¥–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–Ω–∞—Ç–∞.\n–ï—Å–ª–∏ –≤–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è —ç—Ç–æ—Ç –±–æ—Ç –∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–æ—á—å –≤ –µ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏–∏ –∏ –¥–∞–ª—å–Ω–µ–π—à–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–∏, –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–æ–Ω–∞—Ç–∏—Ç—å –Ω–∞–º. –í—Å–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ–π–¥—É—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É —Å–µ—Ä–≤–µ—Ä–∞ –∏ —É–ª—É—á—à–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞.\n–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É!",
                               reply_markup=await premium())
    
@router.callback_query(lambda callback_query: callback_query.data.startswith("premium_"))
async def select_premium(callback_query: CallbackQuery):
    premium = callback_query.data.split("_")[1]
    if premium == "beginner":
        await callback_query.message.answer(text="beginner", reply_markup=await donate_button(1))
    if premium == "basic":
        await callback_query.message.answer(text="basic", reply_markup=await donate_button(2))
    if premium == "master":
        await callback_query.message.answer(text="master", reply_markup=await donate_button(3))

@router.callback_query(lambda callback_query: callback_query.data.startswith("payStars_"))
async def returnqwe(callback_query: CallbackQuery):
    level = int(callback_query.data.split("_")[1])
    if level == 1: payload = 50
    if level == 2: payload = 150
    if level == 3: payload = 300
    await callback_query.message.answer_invoice(title="–ü—Ä–µ–º–∏—É–º", 
                                                description="–ü—Ä–µ–º–∏—É–º", 
                                                payload=str(payload),
                                                currency="XTR", 
                                                prices=[LabeledPrice(label="XTR", amount=payload)])

@router.pre_checkout_query()
async def pre_checkout_query(query: PreCheckoutQuery):
    await query.answer(True)

@router.message(F.successful_payment)
async def successful_payment(message: Message):
    payload = int(message.successful_payment.invoice_payload)
    if payload == 50:
        await User.ai.level.set(tg_id=message.from_user.id, level=1)
    if payload == 150:
        await User.ai.level.set(tg_id=message.from_user.id, level=2)
    if payload == 300:
        await User.ai.level.set(tg_id=message.from_user.id, level=3)
    await User.ai.subscription_date.set(tg_id=message.from_user.id)